basePath: /
definitions:
  apperr.AppError:
    properties:
      code:
        description: 'ex: "duplicate", "validation", "bad_request"'
        type: string
      err: {}
      httpstatus:
        type: integer
      message:
        type: string
    type: object
  domain.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.CreateUserReq:
    properties:
      email:
        example: test@mail.com
        type: string
      name:
        example: Ariya
        type: string
    type: object
  dto.ListUsersResp:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.User'
        type: array
      limit:
        example: 20
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    type: object
  dto.LoginReq:
    properties:
      email:
        example: user@mail.com
        type: string
      password:
        example: secret123
        type: string
    type: object
  dto.RegisterReq:
    properties:
      email:
        example: user@mail.com
        type: string
      name:
        example: Ariya
        type: string
      password:
        example: secret123
        type: string
    type: object
  dto.RegisterResp:
    properties:
      token:
        example: eyJhbGciOiJI...
        type: string
      token_type:
        example: Bearer
        type: string
      user:
        $ref: '#/definitions/dto.User'
    type: object
  dto.TokenResp:
    properties:
      token:
        example: eyJhbGciOiJI...
        type: string
      token_type:
        example: Bearer
        type: string
      user:
        $ref: '#/definitions/dto.User'
    type: object
  dto.UpdateUserReq:
    properties:
      email:
        example: test@mail.com
        type: string
      name:
        example: Ariya
        type: string
    type: object
  dto.User:
    properties:
      email:
        example: user@mail.com
        type: string
      id:
        example: 8d7a9b6e-...
        type: string
      name:
        example: Ariya
        type: string
      role:
        example: user
        type: string
    type: object
host: localhost:8081
info:
  contact:
    url: http://www.swagger.io/support
  description: This is a sample CRUD API boilerplate with Gin and GORM
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Gin CRUD Boilerplate API
  version: "1.0"
paths:
  /api/v1/admin/users/set-password:
    post:
      consumes:
      - application/json
      parameters:
      - description: email, new_password
        in: body
        name: payload
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/apperr.AppError'
      security:
      - BearerAuth: []
      summary: Set password user (admin only)
      tags:
      - admin
  /api/v1/users:
    get:
      parameters:
      - description: page
        example: 1
        in: query
        name: page
        type: integer
      - description: limit
        example: 20
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ListUsersResp'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperr.AppError'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      parameters:
      - description: User payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperr.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperr.AppError'
      security:
      - BearerAuth: []
      summary: Create user
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      parameters:
      - description: User ID (UUID)
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: no content
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperr.AppError'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      parameters:
      - description: User ID (UUID)
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperr.AppError'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID (UUID)
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Update payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperr.AppError'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /api/v1/users/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperr.AppError'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - user
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperr.AppError'
      summary: Login dan dapatkan token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegisterResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperr.AppError'
      summary: Register user baru
      tags:
      - auth
  /health/liveness:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Liveness probe
      tags:
      - health
  /health/readiness:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Readiness probe
      tags:
      - health
  /healthz:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check
      tags:
      - health
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
